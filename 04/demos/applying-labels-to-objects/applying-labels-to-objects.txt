PURPOSE
+++++++

The purpose of this exercise is to use Kustomize to add a label to the metadata
of the example app's configuration in an overlay. The exercise will also add a
common label to the configuration. That is, a label for the metadata, template
and selectors of different objects.

REQUIREMENTS
++++++++++++

This exercise simply requires an installation of the Kustomize standalone
binary (https://github.com/kubernetes-sigs/kustomize/releases). A comparison of
the rendered configurations can be made manually in separate terminals, or you
can use a diffing tool like 'delta' to make the comparison. To install delta
for your OS, see here (https://dandavison.github.io/delta/installation).

STEPS
+++++

 1. Add the label transformer syntax to the overlay Kustomization.

cd config/overlay

    The Kustomization should now look like this:

---
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
  - ../base
  - namespace.yaml
buildMetadata:
  - managedByLabel
namespace: dev
labels:
  - pairs:
      app.kubernetes.io/env: dev
commonLabels:
  app.kubernetes.io/version: v1.0

 2. Create some temporary directories to store the rendered output for builds of
    the base and overlay Kustomizations.

cd ..
BASE="$(mktemp -d -p /tmp)"
OVERLAY="$(mktemp -d -p /tmp)"

 3. Use Kustomize to perform builds of the base and overlay Kustomizations,
    saving the output in each case in the relevant temporary directory.

kustomize build base -o $BASE
kustomize build overlay -o $OVERLAY

 4. Make a comparison of the two builds, and confirm that the labels have been
    added to the relevant objects in the right places. Take particular note of
    the different treatment applied by the LabelTransformer for the different
    convenience fields used.

delta -s $BASE $OVERLAY

You've now used Kustomize's LabelTransformer to manipulate the labels of the
objects in an overlay Kustomization. If you're feeling brave, maybe you can try
out the builtin transformer to selectively apply a label to one or other of the
Deployment and Service objects. Good luck!
